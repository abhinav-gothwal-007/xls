package test_module

file_number 0 "test_module.x"

fn __test_module__test__7() -> bits[7] {
  i: bits[7] = literal(value=0, id=3)
  acc: bits[7] = literal(value=0, id=2)
  i__1: bits[7] = literal(value=1, id=5)
  acc__1: bits[7] = add(i, acc, id=4)
  i__2: bits[7] = literal(value=2, id=7)
  acc__2: bits[7] = add(i__1, acc__1, id=6)
  i__3: bits[7] = literal(value=3, id=9)
  acc__3: bits[7] = add(i__2, acc__2, id=8)
  SIZE: bits[32] = literal(value=7, id=1)
  ret add.10: bits[7] = add(i__3, acc__3, id=10)
}

fn __test_module__test__8() -> bits[8] {
  i: bits[8] = literal(value=0, id=13)
  acc: bits[8] = literal(value=0, id=12)
  i__1: bits[8] = literal(value=1, id=15)
  acc__1: bits[8] = add(i, acc, id=14)
  i__2: bits[8] = literal(value=2, id=17)
  acc__2: bits[8] = add(i__1, acc__1, id=16)
  i__3: bits[8] = literal(value=3, id=19)
  acc__3: bits[8] = add(i__2, acc__2, id=18)
  SIZE: bits[32] = literal(value=8, id=11)
  ret add.20: bits[8] = add(i__3, acc__3, id=20)
}

fn __test_module__foo() -> bits[8] {
  invoke.21: bits[7] = invoke(to_apply=__test_module__test__7, id=21)
  zero_ext.22: bits[8] = zero_ext(invoke.21, new_bit_count=8, id=22)
  invoke.23: bits[8] = invoke(to_apply=__test_module__test__8, id=23)
  ret add.24: bits[8] = add(zero_ext.22, invoke.23, id=24)
}
